# *** TRABAJO INTEGRADOR INTRODUCCION A LA PROGRAMACION 1 COMISION B1 PROFESOR :SERGIO EDUARDO TORRES ***
# INTEGRANTES = GONZALO TOMAS ARTAZA
#               AARON LAUTARO BENJAMIN ROLON
#               PEREZ CRISTIAN ALEJANDRO 
#               
#inporta librerias para realizar el algoritmo 

import random # realizar operaciones relacionadas con la aleatoriedad.numeros /letras /carecteres 
import string #  trabaja con letras, n√∫meros y s√≠mbolos se usa  para generar contrase√±as con numeros letras y caracteres .
import time   # pausa el programa por  60 segundos 

# Aqu√≠ definimos c√≥mo se ver√°n los  productos. Usamos un "diccionario"  tema similar a arreglos 
# para cada categor√≠a, y dentro de ellos, m√°s diccionarios para cada producto. 
# ordeno en categor√≠a y sub categoria icluyo informaci√≥n de cada producto stock descripcion etc.
# estuve viendo arreglo pero no es lo mismo ya que los arreglos cuando se los crea solo trabajar con un tipo de dato y 
# deben ser dimesionados en cambio las listas son mas versatiles util para lo que es este programa 
catalogo_productos = {
    "Televisores": {
        "TV Smart 4K Samsung": {"precio": 500.00, "disponibilidad": 10, "descripcion": "Smart TV 4K de alta resoluci√≥n.", "categoria": "Televisores"},
        "TV OLED LG Curvo": {"precio": 1200.00, "disponibilidad": 5, "descripcion": "Pantalla curva OLED para una inmersi√≥n total.", "categoria": "Televisores"}
    },
    "Celulares": {
        "Smartphone Galaxy A52": {"precio": 300.00, "disponibilidad": 20, "descripcion": "Tel√©fono de gama media con buena c√°mara.", "categoria": "Celulares"},
        "iPhone 15 Pro": {"precio": 1000.00, "disponibilidad": 15, "descripcion": "Lo √∫ltimo en tecnolog√≠a m√≥vil de Apple.", "categoria": "Celulares"}
    },
    "Computadoras": {
        "Notebook HP Pavilion": {"precio": 750.00, "disponibilidad": 8, "descripcion": "Laptop potente para trabajo y estudio.", "categoria": "Computadoras"},
        "PC Escritorio Gamer": {"precio": 1500.00, "disponibilidad": 3, "descripcion": "Computadora de alto rendimiento para juegos.", "categoria": "Computadoras"}
    },
    "Accesorios de inform√°tica": {
        "Teclado Mec√°nico RGB": {"precio": 70.00, "disponibilidad": 30, "descripcion": "Teclado con retroiluminaci√≥n personalizable.", "categoria": "Accesorios de inform√°tica"},
        "Mouse Inal√°mbrico Logitech": {"precio": 25.00, "disponibilidad": 50, "descripcion": "Mouse ergon√≥mico para uso diario.", "categoria": "Accesorios de inform√°tica"}
    },
    "Electrodom√©sticos peque√±os": {
        "Microondas Atma 20L": {"precio": 90.00, "disponibilidad": 12, "descripcion": "Microondas compacto para calentar y cocinar.", "categoria": "Electrodom√©sticos peque√±os"},
        "Licuadora Philips": {"precio": 50.00, "disponibilidad": 18, "descripcion": "Potente licuadora para preparar batidos.", "categoria": "Electrodom√©sticos peque√±os"}
    },
    "Electrodom√©sticos grandes": {
        "Heladera No Frost": {"precio": 800.00, "disponibilidad": 7, "descripcion": "Refrigerador espacioso con tecnolog√≠a No Frost.", "categoria": "Electrodom√©sticos grandes"},
        "Lavarropas Autom√°tico": {"precio": 600.00, "disponibilidad": 9, "descripcion": "Lavarropas de carga frontal con m√∫ltiples programas.", "categoria": "Electrodom√©sticos grandes"}
    },
    "Audio y sonido": {
        "Auriculares Bluetooth Sony": {"precio": 80.00, "disponibilidad": 25, "descripcion": "Auriculares inal√°mbricos con excelente sonido.", "categoria": "Audio y sonido"},
        "Parlante JBL Port√°til": {"precio": 120.00, "disponibilidad": 15, "descripcion": "Parlante a prueba de agua con gran autonom√≠a.", "categoria": "Audio y sonido"}
    },
    "Gaming": {
        "Consola PlayStation 5": {"precio": 700.00, "disponibilidad": 6, "descripcion": "La √∫ltima consola de Sony para una experiencia inmersiva.", "categoria": "Gaming"},
        "Mando Xbox Series X": {"precio": 60.00, "disponibilidad": 20, "descripcion": "Control inal√°mbrico para consolas Xbox.", "categoria": "Gaming"}
    },
    "C√°maras y fotograf√≠a": {
        "C√°mara Digital Canon": {"precio": 400.00, "disponibilidad": 10, "descripcion": "C√°mara compacta ideal para principiantes.", "categoria": "C√°maras y fotograf√≠a"},
        "Drone DJI Mini": {"precio": 350.00, "disponibilidad": 5, "descripcion": "Drone ligero con c√°mara HD.", "categoria": "C√°maras y fotograf√≠a"}
    }
}

#Variable global para el carrito de compras accecible desde todo el programa 
carrito_de_compras = {} #carrito vacio {}

def limpiar_pantalla():
    """Simula una limpieza de pantalla."""
    print("\n" * 40) # Aumentado a 40 para una limpieza de pantalla 

def validar_cantidad_positiva_entera(mensaje, intentos_maximos=5):
    """
    Valida que la cantidad ingresada sea un n√∫mero entero positivo.
    Tiene un l√≠mite de intentos y un bloqueo temporal.
    """
    intentos = 0
    while intentos < intentos_maximos:
        try:
            cantidad_str = input(mensaje)
            cantidad = int(cantidad_str) # Intentamos convertir lo que el usuario escribi√≥ a un n√∫mero entero.
            if cantidad > 0: # Verificamos que sea mayor que cero (positivo).
                return cantidad # Si es v√°lido, lo devolvemos.
            else:
                intentos += 1
                print(f"La cantidad debe ser un n√∫mero entero positivo. Intento ({intentos}) de ({intentos_maximos}).")
        except ValueError: # Si el usuario no escribi√≥ un n√∫mero, ocurre un error (ValueError).
            intentos += 1
            print(f"Por favor, ingrese un n√∫mero entero v√°lido. Intento ({intentos}) de ({intentos_maximos}).")
    
    print(f"\n¬°Se ha superado el l√≠mite de {intentos_maximos} intentos. Bloqueo temporal por 1 minuto!")
    time.sleep(60)
    return None # Si se bloquea, no devuelve nada.

def validar_entrada_alfanumerica(mensaje, intentos_maximos=5):
    """
    Valida que la entrada sea una cadena no vac√≠a.
    Tiene un l√≠mite de intentos y un bloqueo temporal.
    """
    intentos = 0
    while intentos < intentos_maximos:
        entrada = input(mensaje).strip() # .strip() para eliminar espacios en blanco al inicio y final
        if entrada: # Si la entrada no est√° vac√≠a
            return entrada
        else:
            intentos += 1
            print(f"La entrada no puede estar vac√≠a. Intento ({intentos}) de ({intentos_maximos}).")
    
    print(f"\n¬°Se ha superado el l√≠mite de {intentos_maximos} intentos. Bloqueo temporal por 1 minuto!")
    time.sleep(60)
    return None # Si se bloquea, no devuelve nada.


# --- Parte 1: Ingreso Seguro al Sistema (Login) ---
def generar_contrase√±a(longitud=2): # Cambiado a 10 como se indic√≥ en el comentario
    """Genera una contrase√±a aleatoria con letras, n√∫meros y s√≠mbolos."""
    caracteres = string.ascii_letters + string.digits + "!@#$%^&*()_+-=<>?"
    return ''.join(random.choice(caracteres) for _ in range(longitud))

def login():
    contrase√±a_sistema = generar_contrase√±a()
    print("üîê Bienvenido al sistema de gesti√≥n de ElectroSmart")
    print("‚û°Ô∏è Su contrase√±a temporal es:", contrase√±a_sistema)
    print("üëâ Ingrese la contrase√±a para continuar (m√°ximo 5 intentos):")

    intentos = 0
    max_intentos = 5

    while intentos < max_intentos:
        ingreso = input("üîë Ingrese la contrase√±a: ")
        if ingreso == contrase√±a_sistema:
            print("‚úÖ Acceso concedido. ¬°Bienvenido al sistema!")
            return True
        else:
            intentos += 1
            print(f"‚ùå Contrase√±a incorrecta. Intento {intentos} de {max_intentos}.")

    print("\n‚õî Se han superado los intentos permitidos. Usuario bloqueado por 60 segundos.")
    time.sleep(60)
    print("\nüîÑ Intente iniciar sesi√≥n nuevamente.")
    # Si se bloquea, la funci√≥n login se llama a s√≠ misma para un nuevo intento de login
    return login()


# --- Parte 2: Visualizaci√≥n del Cat√°logo ---
def visualizar_catalogo():
    """
    Muestra todos los productos organizados por categor√≠a.
    Incluye nombre, categor√≠a, precio, disponibilidad y descripci√≥n del producto.
    """
    print("\n--- Cat√°logo de Productos ElectroSmart ---")
    if not catalogo_productos:
        print("El cat√°logo est√° vac√≠o. No hay productos para mostrar.")
        return

    for categoria, productos in catalogo_productos.items():
        print(f"\n--- Categor√≠a: {categoria} ---") # Muestra el nombre de la categor√≠a.
        if not productos:
            print("    No hay productos en esta categor√≠a.")
            continue
        for nombre_producto, info_producto in productos.items():
            # Muestra los detalles de cada producto.
            print(f"  - Nombre: {nombre_producto}")
            print(f"    Categor√≠a: {info_producto['categoria']}")
            print(f"    Precio: ${info_producto['precio']:.2f}") # Formatea el precio con 2 decimales.
            print(f"    Disponibilidad: {info_producto['disponibilidad']} unidades")
            print(f"    Descripci√≥n: {info_producto['descripcion']}")
            print("-" * 30) # separar los productos. 

# --- Parte 3: Agregar Productos al Carrito ---
def agregar_al_carrito():
    """
    Permite al usuario seleccionar productos del cat√°logo y agregarlos al carrito. 
    Valida la existencia del producto y la cantidad.
    """
    print("\n--- Agregar Productos al Carrito ---")
    visualizar_catalogo() # Primero, mostramos el cat√°logo para que el usuario vea y elija el producto 

    # Pedimos al usuario el nombre del producto que quiere.
    nombre_producto_elegido = validar_entrada_alfanumerica("Ingrese el nombre exacto del producto que desea agregar: ")
    if nombre_producto_elegido is None:
        print("Volviendo al men√∫ principal debido a demasiados intentos fallidos.")
        return # Si hay bloqueo, volvemos al men√∫.

    # Buscamos el producto en todo el cat√°logo.
    producto_encontrado = None
    info_producto_encontrado = None
    for categoria, productos in catalogo_productos.items():
        if nombre_producto_elegido in productos:
            producto_encontrado = nombre_producto_elegido
            info_producto_encontrado = productos[nombre_producto_elegido]
            break # Una vez que lo encontramos, salimos del bucle.

    if producto_encontrado is None:
        print("‚ùå El producto ingresado no se encuentra en el cat√°logo. Por favor, intente con el nombre exacto.")
        return

    # Verificar si el producto tiene disponibilidad antes de pedir cantidad
    if info_producto_encontrado['disponibilidad'] == 0:
        print(f"‚ùå Lo sentimos, '{producto_encontrado}' est√° agotado.")
        return

    print(f"Producto seleccionado: {producto_encontrado} (Disponibles: {info_producto_encontrado['disponibilidad']})")
    
    # Pedimos la cantidad deseada.
    cantidad_deseada = validar_cantidad_positiva_entera("Ingrese la cantidad que desea agregar: ")
    if cantidad_deseada is None:
        print("Volviendo al men√∫ principal debido a demasiados intentos fallidos.")
        return # Si hay bloqueo, volvemos al men√∫.

    # Validamos que haya suficiente stock.
    if cantidad_deseada > info_producto_encontrado['disponibilidad']:
        print(f"‚ùå Lo sentimos, solo quedan {info_producto_encontrado['disponibilidad']} unidades disponibles de {producto_encontrado}.")
        return

    # Si todo es v√°lido, agregamos o actualizamos el producto en el carrito.
    if producto_encontrado in carrito_de_compras:
        carrito_de_compras[producto_encontrado]['cantidad'] += cantidad_deseada
    else:
        # Copiamos la informaci√≥n del producto y agregamos la cantidad.
        carrito_de_compras[producto_encontrado] = info_producto_encontrado.copy()
        carrito_de_compras[producto_encontrado]['cantidad'] = cantidad_deseada
    
    # Reducimos la disponibilidad del producto en el cat√°logo.
    info_producto_encontrado['disponibilidad'] -= cantidad_deseada

    print(f"‚úÖ '{cantidad_deseada}' unidades de '{producto_encontrado}' agregadas al carrito exitosamente.")

# --- Parte 4: Ver Productos en el Carrito ---
def ver_carrito():
    """
    Muestra la lista de productos que el usuario ha agregado al carrito.
    Incluye detalles como nombre, categor√≠a, precio unitario, cantidad y subtotal.
    """
    print("\n--- Su Carrito de Compras ---")
    if not carrito_de_compras:
        print("Su carrito est√° vac√≠o. ¬°Explore nuestro cat√°logo y agregue productos!")
        return

    total_general = 0.0 # Variable para calcular el costo total del carrito.
    for nombre_producto, info_en_carrito in carrito_de_compras.items():
        precio_unitario = info_en_carrito['precio']
        cantidad = info_en_carrito['cantidad']
        subtotal = precio_unitario * cantidad # Calculamos el subtotal de cada producto.
        total_general += subtotal # Sumamos al total general.

        print(f"  - Producto: {nombre_producto}")
        print(f"    Categor√≠a: {info_en_carrito['categoria']}")
        print(f"    Precio Unitario: ${precio_unitario:.2f}")
        print(f"    Cantidad: {cantidad}")
        print(f"    Subtotal: ${subtotal:.2f}")
        print("-" * 10)
    
    print(f"\n--- Total a Pagar en Carrito: ${total_general:.2f} ---")

# --- Parte 5: Eliminar Productos del Carrito ---
def eliminar_del_carrito():
    """
    Permite al usuario eliminar productos del carrito. Solicita confirmaci√≥n antes de eliminar.
    """
    print("\n--- Eliminar Productos del Carrito ---")
    if not carrito_de_compras: 
        print("El carrito est√° vac√≠o. No hay productos para eliminar.")
        return

    ver_carrito() # Mostramos el carrito para que el usuario vea qu√© puede eliminar.

    # Pedimos el nombre del producto a eliminar.
    nombre_producto_a_eliminar = validar_entrada_alfanumerica("Ingrese el nombre exacto del producto a eliminar del carrito: ")
    if nombre_producto_a_eliminar is None:
        print("Volviendo al men√∫ principal debido a demasiados intentos fallidos.")
        return

    if nombre_producto_a_eliminar not in carrito_de_compras:
        print("‚ùå El producto ingresado no se encuentra en su carrito.")
        return

    # preguntamos confirmaci√≥n eliminacion de producto en caso que se arrepiente el comprador .
    confirmacion = input(f"¬øEst√° seguro de que desea eliminar '{nombre_producto_a_eliminar}' del carrito (s√≠/no)? ").lower()
    if confirmacion == 'si' or confirmacion == 's√≠':
        # Devolvemos la cantidad al stock del cat√°logo.
        cantidad_a_devolver = carrito_de_compras[nombre_producto_a_eliminar]['cantidad']
        categoria_producto = carrito_de_compras[nombre_producto_a_eliminar]['categoria']
        
        # Incrementamos la disponibilidad en el catalogo_productos.
        # Es importante asegurarse de que el producto exista en el cat√°logo principal antes de intentar actualizar su disponibilidad
        if nombre_producto_a_eliminar in catalogo_productos[categoria_producto]:
            catalogo_productos[categoria_producto][nombre_producto_a_eliminar]['disponibilidad'] += cantidad_a_devolver

        del carrito_de_compras[nombre_producto_a_eliminar] # Eliminamos el producto del carrito.
        print(f"‚úÖ '{nombre_producto_a_eliminar}' ha sido eliminado de su carrito.")
    else:
        print("Operaci√≥n cancelada. El producto no fue eliminado.")

# --- Parte 6: Finalizar la Compra ---
def finalizar_compra():
    """
    Permite al usuario finalizar la compra y proceder al pago. Gestiona los diferentes m√©todos de pago
    y sus recargos. No permite finalizar la compra si el carrito est√° vac√≠o.
    """
    print("\n--- Finalizar Compra ---")
    if not carrito_de_compras:
        print("Su carrito est√° vac√≠o. No puede finalizar la compra sin productos.")
        return
    
    ver_carrito() # Mostramos el resumen del carrito antes de finalizar.
    
    total_a_pagar = sum(item['precio'] * item['cantidad'] for item in carrito_de_compras.values())

    print(f"\nEl total de su compra es: ${total_a_pagar:.2f}")

    print("\nSeleccione un medio de pago:")
    print("1. Efectivo ")
    print("2. Tarjeta de cr√©dito ")
    print("3. Bitcoin ")

    opcion_pago = validar_cantidad_positiva_entera("Elija una opci√≥n de pago: ")
    if opcion_pago is None:
        print("Volviendo al men√∫ principal debido a demasiados intentos fallidos.")
        return

    monto_final = total_a_pagar

    if opcion_pago == 1:
        print(f"\nHa elegido pagar en Efectivo. El monto final es: ${monto_final:.2f}")
    elif opcion_pago == 2:
        print("\nHa elegido pagar con Tarjeta de cr√©dito.")
        print("Seleccione un plan de cuotas:")
        print("1. 1 o 3 cuotas (12% de recargo)")
        print("2. 6 cuotas (18% de recargo)")
        print("3. 12 cuotas (36% de recargo)")

        opcion_cuotas = validar_cantidad_positiva_entera("Ingrese el n√∫mero de la opci√≥n de cuotas: ")
        if opcion_cuotas is None:
            print("Volviendo al men√∫ principal debido a demasiados intentos fallidos.")
            return

        recargo = 0
        if opcion_cuotas == 1:
            recargo = 0.12 # 12%
        elif opcion_cuotas == 2:
            recargo = 0.18 # 18%
        elif opcion_cuotas == 3:
            recargo = 0.36 # 36%
        else:
            print("Opci√≥n de cuotas inv√°lida. No se aplicar√° recargo.")
        
        monto_final *= (1 + recargo) # cuenta suma recargo en cuotas  
        print(f"\nMonto final con recargo por cuotas: ${monto_final:.2f}")

    elif opcion_pago == 3:
        print(f"\nHa elegido pagar con Bitcoin. El monto final es: ${monto_final:.2f}")
    else:
        print("Opci√≥n de pago inv√°lida. Por favor, seleccione una opci√≥n v√°lida.")
        input("Presione Enter para continuar...") # Pausa para que el usuario pueda leer el mensaje de error.
        return

    print("\n--- ¬°Compra finalizada con √©xito! ---")
    print(f"El monto total cobrado es: ${monto_final:.2f}")
    
    # Vaciamos el carrito despu√©s de la compra.
    carrito_de_compras.clear()
    print("Su carrito ha sido vaciado. ¬°Gracias por elegirnos!")

# --- Men√∫ Principal del Sistema ---
def menu_principal():
    """
    Muestra el men√∫ principal de opciones del software de gesti√≥n y dirige al usuario a las diferentes funciones.
    """
    while True: # Este bucle hace que el men√∫ se muestre una y otra vez hasta que el usuario elija salir.
        limpiar_pantalla() # Para que el men√∫ se vea siempre limpio.
        print("\n*** Men√∫ Principal de ElectroSmart ***")
        print("1. Ver Cat√°logo de Productos")
        print("2. Agregar Productos al Carrito")
        print("3. Ver Carrito de Compras")
        print("4. Eliminar Productos del Carrito")
        print("5. Finalizar la Compra ")
        print("6. Salir del Sistema")

        opcion = validar_cantidad_positiva_entera("¬øQu√© desea hacer usted? ")
        
        if opcion is None: # Si validar_cantidad_positiva_entera retorna None por bloqueo
            print("Ha superado el n√∫mero de intentos. El sistema se reiniciar√° para la sesi√≥n de login.")
            time.sleep(3) # Peque√±a pausa antes de intentar el login de nuevo
            if login(): # Intentar iniciar sesi√≥n de nuevo
                continue # Si el login es exitoso, volver al men√∫ principal
            else:
                print("No se pudo iniciar sesi√≥n. Saliendo del programa.")
                break # Salir completamente si el reintento de login falla
        
        if opcion == 1:
            visualizar_catalogo()
            input("\nPresione Enter para continuar...") # Pausa para que el usuario pueda leer.
        elif opcion == 2:
            agregar_al_carrito() 
            input("\nPresione Enter para continuar...")
        elif opcion == 3:
            ver_carrito()
            input("\nPresione Enter para continuar...")
        elif opcion == 4:
            eliminar_del_carrito()
            input("\nPresione Enter para continuar...")
        elif opcion == 5:
            finalizar_compra()
            input("\nPresione Enter para continuar...")
        elif opcion == 6:
            print("\nGracias por usar el sistema de ElectroSmart. ¬°Hasta pronto!")
            break # Sale del bucle, terminando el programa.
        else: #por si ingresa otra opcion no valida en el bucle 
            print("Opci√≥n inv√°lida. Por favor, ingrese un n√∫mero entre (1 y 6).")
            input("\nPresione Enter para continuar...")

# --- Inicio del Programa ---
if __name__ == "__main__":
    # Primero iniciar sesi√≥n. Si es exitoso, print inicio del menu y espera una input del usuario 
    if login():
        menu_principal()